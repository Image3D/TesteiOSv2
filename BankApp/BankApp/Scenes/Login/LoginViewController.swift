//
//  LoginViewController.swift
//  BankApp
//
//  Created by Joni Campos on 19/09/19.
//  Copyright (c) 2019 Joni Campos. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LoginDisplayLogic: class
{
  func displaySomething(viewModel: Login.Something.ViewModel)
    
    //chame a 
}

class LoginViewController: UIViewController, LoginDisplayLogic{
    
    
    //mark Campos input
    @IBOutlet weak var userInput: UITextField!
    @IBOutlet weak var passwordInput: UITextField!
    
  var interactor: LoginBusinessLogic?
  var router: (NSObjectProtocol & LoginRoutingLogic & LoginDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LoginInteractor()
    let presenter = LoginPresenter()
    let router = LoginRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    //doSomething()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    
    //set parametros
    var request2 = Login.Something.Request()
    request2.user = userInput.text
    request2.password = passwordInput.text
    
    //chama o interactor
    //let request = Login.Something.Request()
    interactor?.doSomething(request: request2)
  }
  
  func displaySomething(viewModel: Login.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
    
    
    
    
    
    
    
    
    
  }
    
    
    @IBAction func loginButton(_ sender: Any) {
        
        // valida campos
        //verifica se campo usuário vazio
        
        let senha = passwordInput.text!
        let usuario = userInput.text!
        
        if (usuario.count > 0) {
           //campo user nao está vazio...valide se CPF ou email
            
            
            //valide se email
            
            let emailValidado: Bool = (userInput.text?.isValidEmail())!
            
            if emailValidado
            {
                //print ( "email validado")
                
                //é e-mail verifique a senha
               
                // valide o campo senha
                let validaResult: String = Autenticacao().validatePassword(password : senha)!
                
               
                if validaResult != "Senha é Válida" {
                
                    //imprima mensagem de erro
                    let alertController = UIAlertController(title: "Atenção...", message:
                        validaResult, preferredStyle: .alert)
                    alertController.addAction(UIAlertAction(title: "OK", style: .default))
                    
                    self.present(alertController, animated: true, completion: nil)
                    
                    
                    //coloque o foco no campo user
                    self.userInput.becomeFirstResponder()
                    
                
                }else{
                    // chame o Interactor
                    
                    
                    
                    doSomething() // chama o Interactor
                }
              
               
            }
            else{
                //valide CPF
                
                let login = usuario
                
                //remove pontos e traços
                var cpf = login.replacingOccurrences(of: ".", with: "")
                cpf = cpf.replacingOccurrences(of: "-", with: "")
                
          
                
                if (cpf.isNumber() && cpf.count == 11)
                {
                    ///é CPF e tem 11 caracteres...verifique a senha
                    let validaResult2: String = Autenticacao().validatePassword(password : senha)!
                    
                    if validaResult2 != "Senha é Válida" {
                        //imprima mensagem de erro
                        let alertController = UIAlertController(title: "Atenção...", message:
                            validaResult2, preferredStyle: .alert)
                        alertController.addAction(UIAlertAction(title: "OK", style: .default))
                        
                        self.present(alertController, animated: true, completion: nil)
                        
                        
                        //coloque o foco no campo password
                        self.passwordInput.becomeFirstResponder()
                    }else{
                         doSomething() // chama o Interactor
                    }
                    
                    
                }else{
                    let alertController = UIAlertController(title: "Atenção...", message:
                        "CPF tem que ser numerico e com 11 caracteres", preferredStyle: .alert)
                    alertController.addAction(UIAlertAction(title: "OK", style: .default))
                    
                    self.present(alertController, animated: true, completion: nil)
                    
                    
                    //coloque o foco no campo user
                    self.userInput.becomeFirstResponder()
                }
            }
            
            
            
            
        } else {
           // print("text field empty")
            let alertController = UIAlertController(title: "Atenção...", message:
                "O campo User não pode ser vazio!", preferredStyle: .alert)
            alertController.addAction(UIAlertAction(title: "OK", style: .default))
            
            self.present(alertController, animated: true, completion: nil)
            
        
            //coloque o foco no campo user
            self.userInput.becomeFirstResponder()
        }
    }
    
    
}

extension String {
            func isValidEmail() -> Bool {
                // here, `try!` will always succeed because the pattern is valid
                let regex = try! NSRegularExpression(pattern: "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$", options: .caseInsensitive)
                return regex.firstMatch(in: self, options: [], range: NSRange(location: 0, length: count)) != nil
            }

    
//verifica se é numerico
func isNumber() -> Bool {
        let numberCharacters = NSCharacterSet.decimalDigits.inverted
        return !self.isEmpty && self.rangeOfCharacter(from: numberCharacters) == nil
    }
}
